[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "langgraph-ai-tutor-agent"
version = "0.1.0"
description = "Интеллектуальный агент-репетитор на базе LangGraph и LangChain для обучения математике, истории и английскому языку"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "KairatZhaksylykov", email = "zhaksylykov.k06@gmail.com"}
]
maintainers = [
    {name = "KairatZhaksylykov", email = "zhaksylykov.k06@gmail.com"}
]
keywords = ["ai", "langchain", "langgraph", "tutor", "education", "chatbot"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "langchain>=0.1.0",
    "langgraph>=0.0.20",
    "pydantic>=2.0.0",
    "uvicorn>=0.20.0",
    "langchain-core>=0.1.0",
    "langchain-together>=0.0.1",
    "langchain-community>=0.0.10",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/Kairatzh/langgraph-ai-tutor-agent"
Repository = "https://github.com/Kairatzh/langgraph-ai-tutor-agent.git"
"Bug Tracker" = "https://github.com/Kairatzh/langgraph-ai-tutor-agent/issues"

[project.scripts]
tutor-agent = "agent:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["tools*", "utils*", "configs*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tools", "utils", "configs"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["tools", "utils", "configs"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

